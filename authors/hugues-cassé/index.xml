<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugues Cassé on Jordy Ruiz</title>
    <link>https://dune-jr.github.io/authors/hugues-cass%C3%A9/</link>
    <description>Recent content in Hugues Cassé on Jordy Ruiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Sep 2017 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://dune-jr.github.io/authors/hugues-cass%C3%A9/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working Around Loops for Infeasible Path Detection in Binary Programs</title>
      <link>https://dune-jr.github.io/publication/scam17/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0200</pubDate>
      
      <guid>https://dune-jr.github.io/publication/scam17/</guid>
      <description>Infeasible paths are a major cause of overestimation of the Worst-Case Execution Time (WCET): without data flow constraints, static analysis by implicit path enumeration will take into account semantically impossible, potentially expensive execution paths, making the Worst-Case Execution Path unreachable in practice. We present in this paper an approach that allows to significantly tighten the WCET by identifying infeasible paths, namely in loops, and injecting them as additional Integer Linear Programming (ILP) constraints during the WCET computation.</description>
    </item>
    
  </channel>
</rss>